version: '3'
services:

#Default Administrator User
#Email: admin@example.com
#Password: changeme

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: npm
    ports:
#     - '80:80'
      - '81:81'
      - '443:443'
    environment:
      DISABLE_IPV6: true
    volumes:
      - ./docker/proxy/data:/data
      - ./docker/proxy/letsencrypt:/etc/letsencrypt
    restart: unless-stopped
    networks:
      docker-servicios:
        ipv4_address: 192.168.254.2

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/portainer/data:/data
    networks:
      docker-servicios:
        ipv4_address: 192.168.254.3

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: dbtesting
      PGDATA: /data/postgres
    volumes:
       - ./init.sql:/docker-entrypoint-initdb.d/init.sql
       - ./docker/postgres/db:/data/postgres
    restart: unless-stopped
    networks:
      docker-servicios:
        ipv4_address: 192.168.254.4

  redis:
    container_name: redis
    image: redis:latest
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - ./docker/redis/data:/data
    restart: unless-stopped
    networks:
      - docker-servicios
        ipv4_address: 192.168.254.5

  bookstack:
    image: lscr.io/linuxserver/bookstack
    container_name: bookstack
    #ports: #Sin exposición de puertos para ingresar a través de NPM (Nginx Proxy Manager)
    #  - 80:80
    environment:
      - PUID=1000
      - PGID=1000
      - DB_HOST=postgres
      - DB_PORT=5432
      - APP_URL=${BOOKSTACK_URL}
      - DB_USER=bookstack
      - DB_PASS=${BOOKSTACK_POSTGRES_PASSWORD}
      - DB_DATABASE=bookstackdb
    volumes:
      - ./docker/bookstack/data:/config
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      docker-servicios:
        ipv4_address: 192.168.254.6
    
  netbox:
    image: lscr.io/linuxserver/netbox:latest
    container_name: netbox
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Argentina/Mendoza
      - SUPERUSER_EMAIL=${NETBOX_MAIL}
      - SUPERUSER_PASSWORD=${NETBOX_PASSWORD}
      - DB_NAME=netboxdb
      - DB_USER=netbox
      - DB_PASSWORD=${NETBOX_POSTGRES_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ALLOWED_HOSTS=['*']
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB_TASK=0 # Database ID for tasks
      - REDIS_DB_CACHE=1 # Database ID for cache
      #- BASE_PATH=<BASE_PATH> #optional
      #- REMOTE_AUTH_ENABLED=<REMOTE_AUTH_ENABLED> #optional
      #- REMOTE_AUTH_BACKEND=<REMOTE_AUTH_BACKEND> #optional
      #- REMOTE_AUTH_HEADER=<REMOTE_AUTH_HEADER> #optional
      #- REMOTE_AUTH_AUTO_CREATE_USER=<REMOTE_AUTH_AUTO_CREATE_USER> #optional
      #- REMOTE_AUTH_DEFAULT_GROUPS=<REMOTE_AUTH_DEFAULT_GROUPS> #optional
      #- REMOTE_AUTH_DEFAULT_PERMISSIONS=<REMOTE_AUTH_DEFAULT_PERMISSIONS> #optional
    volumes:
      - ./docker/netbox/config:/config
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    networks:
      docker-servicios:
        ipv4_address: 192.168.254.7

networks:
  docker-servicios:
    driver: bridge
    ipam:
      config:
        - subnet: 10.254.254.0/24
          gateway: 10.254.254.1